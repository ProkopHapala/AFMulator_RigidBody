In buttons.h there are four classes/structers defined:

* 'class button' encapsulates button properties and methods
* 'class contextMenu' encapsulates properties and methods of a context menu, context menu contains a list of buttons
* 'struc contextMenuSetting' contains the basic characteristics of a particular context menu, this data structure should be used as an interface between the contextMenu class and other objects
* 'struc alphabet' defines the default alphabet used to render text in buttons

CONTEXT MENU AND BUTTON ATTRIBUTES

* any context menu contains a list of buttons, each button has its own attribute, i.e. one of constants in 'enum buttonType', with help of this attribute we can assign different behaviour to each button; a variable actually determining the button's attribute is 'tex', i.e. index of the particular texture to be drawn onto the button; the text contained in the texture drawn onto the button is completely independent of the button attribute, this text is specified in 'initializeMenu()'; behaviour of the button itself is described by 'enum actionType'; multiple buttons with different attributes can invoke the same action from 'actionType', these dependencies are defined in 'setAction()' method; to retrieve an action of a given button call 'getAction()'
* together with attribute each button has also its activity embodied in variable 'buttonIsEnabled', if button is enabled, it appears bright and works normally; on the other hand, if it is disabled, it still appears on the screen, but with darker color and cannot be clicked

USING CONTEXT MENU

* prior to creation of the menu, initialization has to be made to create all textures appearing on the subsequently created buttons; to initialize textures call 'initializeMenu( maxNumOfButtons_, defaultFontInput, fontPath)' where 'numOfTextures' is a number of all textures to appear on buttons in the menu, 'defaultFontInput' states whether to use default font and 'fontPath' is a pathname of the font one wants to use, this argument has an implicit value which needs to be modified appropriately
* to create a context menu call 'createMenu()' with appropriate arguments, prefered method is 'createMenu( contextMenuSetting* contSetting, float menuCornerX, float menuCornerY, float menuCornerZ )', where 'contSetting' parameter is the carrier of the menu characteristics and 'menuCornerX', 'menuCornerY', 'menuCornerZ' are coordinates of the menu in the system coordinates; 'contSetting' defines properties of one kind of menus, so it can be used to create multiple menus of the same kind; contSetting can be generated by its method 'set' by passing suitable arguments or by specifying a configuration file; configuration file is of the following form:

numberOfButtons				// number of buttons in the menu

activity_1				// activity (enabled/disabled) of the first button in the menu
activity_2				// activity (enabled/disabled) of the second button in the menu
...
activity_numberOfButtons		// activity (enabled/disabled) of the numberOfButtons-th button in the menu

attr_1					// attribute of the first button in the menu
attr_2					// attribute of the second button in the menu
...
attr_numberOfButtons			// attribute of the numberOfButtons-th button in the menu


* to draw an existing menu call 'drawMenu()'
* to destroy an existing menu call 'destroyMenu()'
* at the end of the application 'terminateMenu()' should be called to free memory containing button textures

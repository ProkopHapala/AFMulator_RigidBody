
#ifndef _TERMINAL_ACCESSORIES_
#define _TERMINAL_ACCESSORIES_

struct relaxParams {
	double glob_dtmax, glob_damping;
	int    glob_maxIters;
};

struct flagList {
	bool graphicalMode	 = true;
	bool scanningBoxFlag = true;
	bool suppressOutput	 = false;
	bool delay		     = false;
};

// terminal parameters
const char TERMINAL_SHORT_STRING[]	= "-t";
const char TERMINAL_LONG_STRING[]	= "--terminal";
const char DELAY_SHORT_STRING[]		= "-d";
const char DELAY_LONG_STRING[]		= "--relaxation-delayed";
const char SUPPRESS_SHORT_STRING[]	= "-s";
const char SUPPRESS_LONG_STRING[]	= "--suppress-output";
const char INPUT_SHORT_STRING[]		= "-i";
const char INPUT_LONG_STRING[]		= "--input-file";
const char OUTPUT_SHORT_STRING[]	= "-o";
const char OUTPUT_LONG_STRING[]		= "--output-file";
const char OUTPUT_TRAJEC_SHORT_STRING[]	= "-j";
const char OUTPUT_TRAJEC_LONG_STRING[]	= "--output-trajectories-file";
const char OUTPUT_ZSTEPS_SHORT_STRING[]	= "-z";
const char OUTPUT_ZSTEPS_LONG_STRING[]	= "--output-zsteps-file";
const char OUTPUT_META_SHORT_STRING[]	= "-m";
const char OUTPUT_META_LONG_STRING[]	= "--output-metadata-file";
const char HELP_SHORT_STRING[]		= "-h";
const char HELP_LONG_STRING[]		= "--help";

void showHelpTerminal(){
// print a list of parameters of the application

	printf( "\n-------------------- Help for Terminal ----------------------\n\n" );
	printf( "Parameters to use in the terminal:\n" );
	
	printf( "\"%s\" or \"%s\"\t\t\t print this help and terminate the application\n", HELP_SHORT_STRING, HELP_LONG_STRING );
	printf( "\"%s\" or \"%s\"\t\t\t non-graphical mode\n", TERMINAL_SHORT_STRING, TERMINAL_LONG_STRING );
	printf( "\"%s\" or \"%s\"\t\t set delay 10ms to the relaxation\n", DELAY_SHORT_STRING, DELAY_LONG_STRING );
	printf( "\"%s\" or \"%s\"\t\t suppress the output generated by the main loop\n", SUPPRESS_SHORT_STRING, SUPPRESS_LONG_STRING );
	printf( "\"%s\" or \"%s\"\t\t\t after this parameter expect input file name, when no valid name is specified then default value is used\n", \
		INPUT_SHORT_STRING, INPUT_LONG_STRING );
	printf( "\"%s\" or \"%s\"\t\t\t after this parameter expect output file name for pixels, when no valid name is specified then default value is used\n", \
		OUTPUT_SHORT_STRING, OUTPUT_LONG_STRING );
	printf( "\"%s\" or \"%s\"\t after this parameter expect output file name for trajectories, when no valid name is specified then default value is used\n", \
		OUTPUT_TRAJEC_SHORT_STRING, OUTPUT_TRAJEC_LONG_STRING );
	printf( "\"%s\" or \"%s\"\t\t after this parameter expect output file name for z-steps, when no valid name is specified then default value is used\n", \
		OUTPUT_ZSTEPS_SHORT_STRING, OUTPUT_ZSTEPS_LONG_STRING );
	printf( "\"%s\" or \"%s\"\t after this parameter expect output file name for metadata, when no valid name is specified then default value is used\n", \
		OUTPUT_META_SHORT_STRING, OUTPUT_META_LONG_STRING );
	
	printf( "\n-------------------------------------------------------------\n\n" );
	
}

void handleTerminalInput( int argc, char* argv[], char* inputDirectoryName, char* outputDirectoryName, bool& graphicalMode, bool& delay, bool& suppressOutput, bool& loopEnd, char* confFilesCommander, char* outputFileName, char* outputZstepFileName, char* outputTrajecFileName, char* outputMetaFileName ){
// handle parameters appended to the program call

	bool expectInputFileName = false, expectOutputFileName = false;
	bool expectOutputFileNameTrajec = false, expectOutputZstepFileName = false;
	bool expectOutputMetaFileName = false;

	for( int i = 1; i < argc; i++ ){ // counting from one!
		if( !strcmp( argv[i], TERMINAL_SHORT_STRING ) || !strcmp( argv[i], TERMINAL_LONG_STRING ) ){
			graphicalMode = false;
			
			expectInputFileName = false;
			expectOutputFileName = false;
			expectOutputFileNameTrajec = false;
			expectOutputZstepFileName = false;
			expectOutputMetaFileName = false;
			
		} else if( !strcmp( argv[i], DELAY_SHORT_STRING ) || !strcmp( argv[i], DELAY_LONG_STRING ) ){
			delay = true;

			expectInputFileName = false;
			expectOutputFileName = false;
			expectOutputFileNameTrajec = false;
			expectOutputZstepFileName = false;
			expectOutputMetaFileName = false;

		} else if( !strcmp( argv[i], SUPPRESS_SHORT_STRING ) || !strcmp( argv[i], SUPPRESS_LONG_STRING ) ){
			suppressOutput = true;

			expectInputFileName = false;
			expectOutputFileName = false;
			expectOutputFileNameTrajec = false;
			expectOutputZstepFileName = false;
			expectOutputMetaFileName = false;

		} else if( !strcmp( argv[i], HELP_SHORT_STRING ) || !strcmp( argv[i], HELP_LONG_STRING ) ){
			showHelpTerminal();
			loopEnd = true;			

			expectInputFileName = false;
			expectOutputFileName = false;
			expectOutputFileNameTrajec = false;
			expectOutputZstepFileName = false;
			expectOutputMetaFileName = false;

		} else if( !strcmp( argv[i], INPUT_SHORT_STRING ) || !strcmp( argv[i], INPUT_LONG_STRING ) ){
			expectInputFileName = true;
			
			expectOutputFileName = false;
			expectOutputFileNameTrajec = false;
			expectOutputZstepFileName = false;
			expectOutputMetaFileName = false;
			
		} else if( !strcmp( argv[i], OUTPUT_SHORT_STRING ) || !strcmp( argv[i], OUTPUT_LONG_STRING ) ){
			expectOutputFileName = true;
			
			expectInputFileName = false;
			expectOutputFileNameTrajec = false;
			expectOutputZstepFileName = false;
			expectOutputMetaFileName = false;

		} else if( !strcmp( argv[i], OUTPUT_TRAJEC_SHORT_STRING ) || !strcmp( argv[i], OUTPUT_TRAJEC_LONG_STRING ) ){
			expectOutputFileNameTrajec = true;

			expectInputFileName = false;
			expectOutputFileName = false;
			expectOutputZstepFileName = false;
			expectOutputMetaFileName = false;

		} else if( !strcmp( argv[i], OUTPUT_ZSTEPS_SHORT_STRING ) || !strcmp( argv[i], OUTPUT_ZSTEPS_LONG_STRING ) ){
			expectOutputZstepFileName = true;

			expectInputFileName = false;
			expectOutputFileName = false;
			expectOutputFileNameTrajec = false;
			expectOutputMetaFileName = false;

		} else if( !strcmp( argv[i], OUTPUT_META_SHORT_STRING ) || !strcmp( argv[i], OUTPUT_META_LONG_STRING ) ){
			expectOutputMetaFileName = false;

			expectInputFileName = false;
			expectOutputFileName = false;
			expectOutputFileNameTrajec = false;
			expectOutputZstepFileName = true;
			
		} else {
			if( expectInputFileName  ){
				strcpy( confFilesCommander, inputDirectoryName );
				strcat( confFilesCommander, argv[i] );
			}
			if( expectOutputFileName ){
				strcpy( outputFileName, outputDirectoryName );
				strcat( outputFileName, argv[i] );
			}
			if( expectOutputFileNameTrajec ){
				strcpy( outputTrajecFileName, outputDirectoryName );
				strcat( outputTrajecFileName, argv[i] );
			}
			if( expectOutputZstepFileName ){
				strcpy( outputZstepFileName, outputDirectoryName );
				strcat( outputZstepFileName, argv[i] );
			}			
			if( expectOutputMetaFileName ){
				strcpy( outputMetaFileName, outputDirectoryName );
				strcat( outputMetaFileName, argv[i] );
			}			

		}
	
	}

}

#endif
